var searchIndex = {};
searchIndex['nue'] = {"items":[[0,"","nue","A collection of tools for working with binary data, I/O, and POD structs.",null,null]],"paths":[]};
searchIndex['nue_macros'] = {"items":[[0,"","nue_macros","`#[derive(..)]` attributes for POD and binary encodable types.",null,null]],"paths":[]};
searchIndex['nue_codegen'] = {"items":[[0,"","nue_codegen","nue derive syntax extension.",null,null],[5,"register","","Registers the plugin for expansion with syntex.",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex['pod'] = {"items":[[0,"","pod","Provides traits that assist with I/O and byte slice conversions involving Plain Old Data.",null,null],[0,"packed","","",null,null],[8,"Unaligned","pod::packed","A marker trait indicating that a type has an alignment of `1`.",null,null],[6,"Un","","",null,null],[8,"Aligned","","A marker trait indicating that a type has an alignment over `1`,\nand is therefore not safe to use in an unaligned context.",null,null],[16,"Unaligned","","An unaligned representation of this type. Usually a u8 array of the\nsame size.",0,null],[11,"is_aligned","","Determines whether an unaligned representation of this type is aligned.",0,null],[11,"as_unaligned","","Borrows the value as unaligned.",0,null],[11,"as_unaligned_mut","","Mutably borrows the value as unaligned.",0,null],[11,"as_aligned","","Borrows an unaligned type as an aligned value.",0,null],[11,"as_aligned_mut","","Mutably borrows an unaligned type as an aligned value.",0,null],[11,"as_aligned_unchecked","","Borrows an unaligned type as an aligned value, without first checking the alignment.",0,null],[11,"as_aligned_mut_unchecked","","Mutably borrows an unaligned type as an aligned value, without first checking the alignment.",0,null],[11,"unaligned","","Converts a value to its unaligned representation.",0,null],[11,"from_unaligned","","Copies a value from its unaligned representation.",0,null],[8,"Packed","","A marker trait indicating that a type is `#[repr(packed)]`.",null,null],[0,"code","pod","I/O traits for POD and other types.",null,null],[3,"VecDecodeOptions","pod::code","Describes how to decode a `Vec<T>`",null,null],[12,"len","","Reads `Some(len)` items, or until EOF",1,null],[12,"options","","The options used to decode each individual item",1,null],[3,"StringDecodeOptions","","Describes how to decode a `String`",null,null],[12,"len","","Reads `Some(len)` bytes, or until EOF",2,null],[3,"CStringDecodeOptions","","Describes how to decode a `CString`",null,null],[12,"require_nul","","When true, errors if EOF is reached before a nul byte is found",3,null],[8,"Encode","","Encodes an value's binary representation to a `Write`.",null,null],[16,"Options","","Options that may be provided to affect how the value is encoded",4,null],[11,"encode","","Encodes to the `Write` with default options",4,{"inputs":[{"name":"encode"},{"name":"w"}],"output":{"name":"result"}}],[11,"encode_options","","Encodes to the `Write` with the provided options",4,{"inputs":[{"name":"encode"},{"name":"w"},{"name":"options"}],"output":{"name":"result"}}],[11,"encode_vec","","Encodes to a new byte vector",4,{"inputs":[{"name":"encode"}],"output":{"name":"result"}}],[11,"encode_vec_options","","Encodes to a new byte vector with the provided options",4,{"inputs":[{"name":"encode"},{"name":"options"}],"output":{"name":"result"}}],[8,"Decode","","Decodes data from a `Read` into a new value.",null,null],[16,"Options","","Options will affect how the value is decoded, and may be used to provide any data that\nis normally lost during encoding.",5,null],[11,"decode","","Decodes from the `Read` with default options",5,{"inputs":[{"name":"decode"},{"name":"r"}],"output":{"name":"result"}}],[11,"decode_options","","Decodes from the `Read` with the provided options",5,{"inputs":[{"name":"decode"},{"name":"r"},{"name":"options"}],"output":{"name":"result"}}],[11,"decode_slice","","Decodes from a byte slice",5,null],[11,"decode_slice_options","","Decodes from a byte slice with the provided options",5,null],[11,"validate","","Implement to assert that the decoded contents are valid",5,{"inputs":[{"name":"decode"}],"output":{"name":"result"}}],[11,"encode","core::option","",6,{"inputs":[{"name":"option"},{"name":"w"}],"output":{"name":"result"}}],[11,"encode_options","","",6,{"inputs":[{"name":"option"},{"name":"w"},{"name":"options"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"result"}}],[11,"decode_options","","",6,{"inputs":[{"name":"option"},{"name":"r"},{"name":"options"}],"output":{"name":"result"}}],[11,"decode_options","collections::string","",7,{"inputs":[{"name":"string"},{"name":"r"},{"name":"options"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"string"},{"name":"w"}],"output":{"name":"result"}}],[11,"decode_options","std::ffi::c_str","",8,{"inputs":[{"name":"cstring"},{"name":"r"},{"name":"options"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"cstring"},{"name":"w"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"cstr"},{"name":"w"}],"output":{"name":"result"}}],[11,"decode_options","collections::vec","",10,{"inputs":[{"name":"vec"},{"name":"r"},{"name":"options"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"vec"},{"name":"w"}],"output":{"name":"result"}}],[11,"encode_options","","",10,{"inputs":[{"name":"vec"},{"name":"w"},{"name":"options"}],"output":{"name":"result"}}],[11,"fmt","pod::code","",1,{"inputs":[{"name":"vecdecodeoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[{"name":"vecdecodeoptions"}],"output":{"name":"vecdecodeoptions"}}],[11,"clone","","",1,{"inputs":[{"name":"vecdecodeoptions"}],"output":{"name":"vecdecodeoptions"}}],[11,"fmt","","",2,{"inputs":[{"name":"stringdecodeoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[{"name":"stringdecodeoptions"}],"output":{"name":"stringdecodeoptions"}}],[11,"clone","","",2,{"inputs":[{"name":"stringdecodeoptions"}],"output":{"name":"stringdecodeoptions"}}],[11,"fmt","","",3,{"inputs":[{"name":"cstringdecodeoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[{"name":"cstringdecodeoptions"}],"output":{"name":"cstringdecodeoptions"}}],[11,"clone","","",3,{"inputs":[{"name":"cstringdecodeoptions"}],"output":{"name":"cstringdecodeoptions"}}],[0,"endian","pod","Containers for primitives",null,null],[3,"EndianPrimitive","pod::endian","A POD container for a primitive that stores a value in the specified endianness\nin memory, and transforms on `get`/`set`",null,null],[6,"Le","","A type alias for unaligned little endian primitives",null,null],[6,"Be","","A type alias for unaligned big endian primitives",null,null],[6,"Native","","A type alias for unaligned native endian primitives",null,null],[8,"EndianConvert","","Describes a value that can be converted to and from a specified byte order.",null,null],[10,"from","","Converts a value from `B`",11,{"inputs":[{"name":"endianconvert"},{"name":"unaligned"}],"output":{"name":"self"}}],[10,"to","","Converts a value to `B`",11,{"inputs":[{"name":"endianconvert"}],"output":{"name":"unaligned"}}],[11,"new","","Creates a new value",12,{"inputs":[{"name":"endianprimitive"},{"name":"t"}],"output":{"name":"self"}}],[11,"get","","Transforms to the native value",12,{"inputs":[{"name":"endianprimitive"}],"output":{"name":"t"}}],[11,"set","","Transforms from a native value",12,{"inputs":[{"name":"endianprimitive"},{"name":"t"}],"output":null}],[11,"raw","","Gets the inner untransformed value",12,{"inputs":[{"name":"endianprimitive"}],"output":{"name":"unaligned"}}],[11,"raw_mut","","A mutable reference to the inner untransformed value",12,{"inputs":[{"name":"endianprimitive"}],"output":{"name":"unaligned"}}],[11,"default","","",12,{"inputs":[{"name":"endianprimitive"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"endianprimitive"},{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"endianprimitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"endianprimitive"},{"name":"endianprimitive"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"endianprimitive"},{"name":"endianprimitive"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"endianprimitive"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",12,{"inputs":[{"name":"endianprimitive"},{"name":"h"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"endianprimitive"}],"output":{"name":"self"}}],[8,"Pod","pod","A marker trait indicating that a type is Plain Old Data.",null,null],[11,"mut_aligned","","Safely borrows the aligned value mutably",13,{"inputs":[{"name":"pod"}],"output":{"name":"option"}}],[11,"mut_unaligned","","Safely borrows the unaligned value mutably",13,{"inputs":[{"name":"pod"},{"name":"t"}],"output":{"name":"option"}}],[11,"aligned","","Safely converts an unaligned value to its aligned equivalent",13,{"inputs":[{"name":"pod"},{"name":"t"}],"output":{"name":"self"}}],[8,"PodExt","","Helper methods for converting POD types to/from byte slices and vectors",null,null],[11,"as_slice","","Borrows the POD as a byte slice",14,null],[11,"mut_slice","","Borrows the POD as a mutable byte slice",14,null],[11,"from_slice","","Borrows a new instance of the POD from a byte slice",14,null],[11,"from_mut_slice","","Borrows a mutable instance of the POD from a mutable byte slice",14,null],[11,"from_vec","","Converts a byte vector to a boxed instance of the POD type",14,{"inputs":[{"name":"podext"},{"name":"vec"}],"output":{"name":"box"}}],[11,"from_box","","Converts a boxed slice to a boxed instance of the POD type",14,{"inputs":[{"name":"podext"},{"name":"box"}],"output":{"name":"box"}}],[11,"to_vec","","Converts a boxed POD to a byte vector",14,{"inputs":[{"name":"podext"}],"output":{"name":"vec"}}],[11,"to_boxed_slice","","Converts a boxed POD to a boxed slice",14,{"inputs":[{"name":"podext"}],"output":{"name":"box"}}],[11,"map","","Converts a POD type from one to another of the same size.",14,{"inputs":[{"name":"podext"}],"output":{"name":"t"}}],[11,"map_mut","","Converts a POD type from one to another of the same size.",14,{"inputs":[{"name":"podext"}],"output":{"name":"t"}}],[11,"uninitialized","","Generates a new uninitialized instance of a POD type.",14,{"inputs":[{"name":"podext"}],"output":{"name":"self"}}],[11,"zeroed","","Creates a new zeroed instance of a POD type.",14,{"inputs":[{"name":"podext"}],"output":{"name":"self"}}],[11,"mut_aligned","","Safely borrows the aligned value mutably",13,{"inputs":[{"name":"pod"}],"output":{"name":"option"}}],[11,"mut_unaligned","","Safely borrows the unaligned value mutably",13,{"inputs":[{"name":"pod"},{"name":"t"}],"output":{"name":"option"}}],[11,"aligned","","Safely converts an unaligned value to its aligned equivalent",13,{"inputs":[{"name":"pod"},{"name":"t"}],"output":{"name":"self"}}],[11,"as_slice","","Borrows the POD as a byte slice",14,null],[11,"mut_slice","","Borrows the POD as a mutable byte slice",14,null],[11,"from_slice","","Borrows a new instance of the POD from a byte slice",14,null],[11,"from_mut_slice","","Borrows a mutable instance of the POD from a mutable byte slice",14,null],[11,"from_vec","","Converts a byte vector to a boxed instance of the POD type",14,{"inputs":[{"name":"podext"},{"name":"vec"}],"output":{"name":"box"}}],[11,"from_box","","Converts a boxed slice to a boxed instance of the POD type",14,{"inputs":[{"name":"podext"},{"name":"box"}],"output":{"name":"box"}}],[11,"to_vec","","Converts a boxed POD to a byte vector",14,{"inputs":[{"name":"podext"}],"output":{"name":"vec"}}],[11,"to_boxed_slice","","Converts a boxed POD to a boxed slice",14,{"inputs":[{"name":"podext"}],"output":{"name":"box"}}],[11,"map","","Converts a POD type from one to another of the same size.",14,{"inputs":[{"name":"podext"}],"output":{"name":"t"}}],[11,"map_mut","","Converts a POD type from one to another of the same size.",14,{"inputs":[{"name":"podext"}],"output":{"name":"t"}}],[11,"uninitialized","","Generates a new uninitialized instance of a POD type.",14,{"inputs":[{"name":"podext"}],"output":{"name":"self"}}],[11,"zeroed","","Creates a new zeroed instance of a POD type.",14,{"inputs":[{"name":"podext"}],"output":{"name":"self"}}]],"paths":[[8,"Aligned"],[3,"VecDecodeOptions"],[3,"StringDecodeOptions"],[3,"CStringDecodeOptions"],[8,"Encode"],[8,"Decode"],[4,"Option"],[3,"String"],[3,"CString"],[3,"CStr"],[3,"Vec"],[8,"EndianConvert"],[3,"EndianPrimitive"],[8,"Pod"],[8,"PodExt"]]};
searchIndex['nue_io'] = {"items":[[0,"","nue_io","Utilities for working with I/O streams.",null,null],[3,"ReadWriteTell","","A wrapper that implements `Tell` for streams that don't support it.",null,null],[3,"SeekForwardRead","","A forward seeking wrapper around a `Read` type.",null,null],[3,"SeekForwardWrite","","A forward seeking wrapper around a `Write` type.",null,null],[3,"SeekAbsoluteRewind","","An absolute seeking wrapper around a `Tell + SeekForward + SeekRewind` type.",null,null],[3,"SeekAll","","A wrapper that decomposes `Seek` into its individual traits.",null,null],[3,"BufSeeker","","A buffered reader that allows for seeking within the buffer.",null,null],[3,"Region","","Creates an isolated segment of an underlying stream.",null,null],[3,"Take","","Wraps around a stream to limit the length of the underlying stream.",null,null],[0,"read_exact","","An extension for `Read`ing an exact amount of data.",null,null],[11,"fmt","byteorder::new","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder::new","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read_u16","byteorder","",2,null],[11,"read_u32","","",2,null],[11,"read_u64","","",2,null],[11,"read_uint","","",2,null],[11,"write_u16","","",2,null],[11,"write_u32","","",2,null],[11,"write_u64","","",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[4,"Error","nue_io::read_exact","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[8,"ReadExactExt","","Extension trait that provides `read_exact` for all `Read` implementations.",null,null],[10,"read_exact","","Reads into the entirety of `buf` or fails with an error.",4,null],[10,"read_exact_eof","","Reads as much as possible into `buf` until EOF.",4,null],[11,"tell","alloc::boxed","",5,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"seek_forward","","",5,{"inputs":[{"name":"box"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_absolute","","",5,{"inputs":[{"name":"box"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_rewind","","",5,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"seek_backward","","",5,{"inputs":[{"name":"box"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_end","","",5,{"inputs":[{"name":"box"},{"name":"i64"}],"output":{"name":"result"}}],[11,"seek_forward","nue_io","",6,{"inputs":[{"name":"seekforwardread"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_forward","","",7,{"inputs":[{"name":"seekforwardwrite"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_absolute","","",8,{"inputs":[{"name":"seekabsoluterewind"},{"name":"u64"}],"output":{"name":"result"}}],[11,"tell","","",9,{"inputs":[{"name":"readwritetell"}],"output":{"name":"result"}}],[11,"read","","",9,null],[11,"fill_buf","","",9,{"inputs":[{"name":"readwritetell"}],"output":{"name":"result"}}],[11,"consume","","",9,{"inputs":[{"name":"readwritetell"},{"name":"usize"}],"output":null}],[11,"read_until","","",9,{"inputs":[{"name":"readwritetell"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",9,{"inputs":[{"name":"readwritetell"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","","",9,null],[11,"flush","","",9,{"inputs":[{"name":"readwritetell"}],"output":{"name":"result"}}],[11,"seek_forward","","",9,{"inputs":[{"name":"readwritetell"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_rewind","","",9,{"inputs":[{"name":"readwritetell"}],"output":{"name":"result"}}],[11,"seek_absolute","","",9,{"inputs":[{"name":"readwritetell"},{"name":"u64"}],"output":{"name":"result"}}],[11,"tell","","",10,{"inputs":[{"name":"seekall"}],"output":{"name":"result"}}],[11,"seek_forward","","",10,{"inputs":[{"name":"seekall"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_absolute","","",10,{"inputs":[{"name":"seekall"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_rewind","","",10,{"inputs":[{"name":"seekall"}],"output":{"name":"result"}}],[11,"seek_backward","","",10,{"inputs":[{"name":"seekall"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_end","","",10,{"inputs":[{"name":"seekall"},{"name":"i64"}],"output":{"name":"result"}}],[11,"seek_rewind","","",6,{"inputs":[{"name":"seekforwardread"}],"output":{"name":"result"}}],[11,"tell","","",6,{"inputs":[{"name":"seekforwardread"}],"output":{"name":"result"}}],[11,"seek_absolute","","",6,{"inputs":[{"name":"seekforwardread"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_end","","",6,{"inputs":[{"name":"seekforwardread"},{"name":"i64"}],"output":{"name":"result"}}],[11,"seek_backward","","",6,{"inputs":[{"name":"seekforwardread"},{"name":"u64"}],"output":{"name":"result"}}],[11,"fill_buf","","",6,{"inputs":[{"name":"seekforwardread"}],"output":{"name":"result"}}],[11,"consume","","",6,{"inputs":[{"name":"seekforwardread"},{"name":"usize"}],"output":null}],[11,"read","","",6,null],[11,"seek_rewind","","",7,{"inputs":[{"name":"seekforwardwrite"}],"output":{"name":"result"}}],[11,"tell","","",7,{"inputs":[{"name":"seekforwardwrite"}],"output":{"name":"result"}}],[11,"seek_absolute","","",7,{"inputs":[{"name":"seekforwardwrite"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_end","","",7,{"inputs":[{"name":"seekforwardwrite"},{"name":"i64"}],"output":{"name":"result"}}],[11,"seek_backward","","",7,{"inputs":[{"name":"seekforwardwrite"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"seekforwardwrite"}],"output":{"name":"result"}}],[11,"seek_rewind","","",8,{"inputs":[{"name":"seekabsoluterewind"}],"output":{"name":"result"}}],[11,"tell","","",8,{"inputs":[{"name":"seekabsoluterewind"}],"output":{"name":"result"}}],[11,"seek_forward","","",8,{"inputs":[{"name":"seekabsoluterewind"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_end","","",8,{"inputs":[{"name":"seekabsoluterewind"},{"name":"i64"}],"output":{"name":"result"}}],[11,"seek_backward","","",8,{"inputs":[{"name":"seekabsoluterewind"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"seekabsoluterewind"}],"output":{"name":"result"}}],[11,"fill_buf","","",8,{"inputs":[{"name":"seekabsoluterewind"}],"output":{"name":"result"}}],[11,"consume","","",8,{"inputs":[{"name":"seekabsoluterewind"},{"name":"usize"}],"output":null}],[11,"fill_buf","","",10,{"inputs":[{"name":"seekall"}],"output":{"name":"result"}}],[11,"consume","","",10,{"inputs":[{"name":"seekall"},{"name":"usize"}],"output":null}],[11,"read","","",10,null],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"seekall"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SeekForwardRead`.",6,{"inputs":[{"name":"seekforwardread"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `SeekForwardWrite`.",7,{"inputs":[{"name":"seekforwardwrite"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `SeekAbsoluteRewind`.",8,{"inputs":[{"name":"seekabsoluterewind"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `ReadWriteTell`.",9,{"inputs":[{"name":"readwritetell"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `SeekAll`.",10,{"inputs":[{"name":"seekall"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `BufSeeker` around the specified `Read`.",11,{"inputs":[{"name":"bufseeker"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_capacity","","Creates a `BufSeeker` with a specific buffer size.",11,{"inputs":[{"name":"bufseeker"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Unwraps the `BufSeeker`, returning the underlying reader.",11,{"inputs":[{"name":"bufseeker"}],"output":{"name":"t"}}],[11,"seek_forward","","",11,{"inputs":[{"name":"bufseeker"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_backward","","",11,{"inputs":[{"name":"bufseeker"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_rewind","","",11,{"inputs":[{"name":"bufseeker"}],"output":{"name":"result"}}],[11,"tell","","",11,{"inputs":[{"name":"bufseeker"}],"output":{"name":"result"}}],[11,"seek_absolute","","",11,{"inputs":[{"name":"bufseeker"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_end","","",11,{"inputs":[{"name":"bufseeker"},{"name":"i64"}],"output":{"name":"result"}}],[11,"read","","",11,null],[11,"fill_buf","","",11,{"inputs":[{"name":"bufseeker"}],"output":{"name":"result"}}],[11,"consume","","",11,{"inputs":[{"name":"bufseeker"},{"name":"usize"}],"output":null}],[11,"new","","Creates a new `Region` at the specified offsets of `inner`.",12,{"inputs":[{"name":"region"},{"name":"t"},{"name":"u64"},{"name":"u64"}],"output":{"name":"self"}}],[11,"region","","Returns the region bounds.",12,null],[11,"into_inner","","Unwraps the `Region` to return the inner stream.",12,{"inputs":[{"name":"region"}],"output":{"name":"t"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"region"}],"output":{"name":"result"}}],[11,"seek_absolute","","",12,{"inputs":[{"name":"region"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_forward","","",12,{"inputs":[{"name":"region"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_backward","","",12,{"inputs":[{"name":"region"},{"name":"u64"}],"output":{"name":"result"}}],[11,"seek_rewind","","",12,{"inputs":[{"name":"region"}],"output":{"name":"result"}}],[11,"seek_end","","",12,{"inputs":[{"name":"region"},{"name":"i64"}],"output":{"name":"result"}}],[11,"tell","","",12,{"inputs":[{"name":"region"}],"output":{"name":"result"}}],[11,"fill_buf","","",12,{"inputs":[{"name":"region"}],"output":{"name":"result"}}],[11,"consume","","",12,{"inputs":[{"name":"region"},{"name":"usize"}],"output":null}],[11,"new","","Creates a new `Take` with `limit` bytes",13,{"inputs":[{"name":"take"},{"name":"t"},{"name":"u64"}],"output":{"name":"self"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"read","","",13,null],[11,"seek_forward","","",13,{"inputs":[{"name":"take"},{"name":"u64"}],"output":{"name":"result"}}],[11,"tell","","",13,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[8,"SeekRewind","","A limited form of seeking that can only be reset from the beginning.",null,null],[10,"seek_rewind","","Seeks back to the beginning of the stream.",14,{"inputs":[{"name":"seekrewind"}],"output":{"name":"result"}}],[8,"SeekForward","","A limited form of seeking that only allows seeking forward.",null,null],[10,"seek_forward","","Seeks forward in the stream.",15,{"inputs":[{"name":"seekforward"},{"name":"u64"}],"output":{"name":"result"}}],[8,"SeekBackward","","A limited form of seeking that only allows seeking backward.",null,null],[10,"seek_backward","","Seeks backward in the stream.",16,{"inputs":[{"name":"seekbackward"},{"name":"u64"}],"output":{"name":"result"}}],[8,"SeekAbsolute","","A limited form of seeking that only seeks to an absolute position from the start.",null,null],[10,"seek_absolute","","Seeks to the specified position in the stream.",17,{"inputs":[{"name":"seekabsolute"},{"name":"u64"}],"output":{"name":"result"}}],[8,"SeekEnd","","A limited form of seeking that only seeks to an offset from the end of the stream.",null,null],[10,"seek_end","","Seeks to the end of the stream + `offset`.",18,{"inputs":[{"name":"seekend"},{"name":"i64"}],"output":{"name":"result"}}],[8,"Tell","","Exposes the current position in the stream without changing it.",null,null],[10,"tell","","Returns the current absolute position in the stream.",19,{"inputs":[{"name":"tell"}],"output":{"name":"result"}}],[8,"SeekAlignExt","","An extension trait that will seek to meet a specified alignment.",null,null],[10,"align_to","","Seeks forward to a multiple of `alignment`.",20,{"inputs":[{"name":"seekalignext"},{"name":"u64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[4,"BigEndian"],[4,"LittleEndian"],[8,"ReadExactExt"],[3,"Box"],[3,"SeekForwardRead"],[3,"SeekForwardWrite"],[3,"SeekAbsoluteRewind"],[3,"ReadWriteTell"],[3,"SeekAll"],[3,"BufSeeker"],[3,"Region"],[3,"Take"],[8,"SeekRewind"],[8,"SeekForward"],[8,"SeekBackward"],[8,"SeekAbsolute"],[8,"SeekEnd"],[8,"Tell"],[8,"SeekAlignExt"]]};
searchIndex['packed'] = {"items":[[0,"","packed","A safe approach to using `#[repr(packed)]` data.",null,null],[6,"Un","","A type alias that represents the unaligned type of `T`.",null,null],[8,"Unaligned","","A marker trait indicating that a type has an alignment of `1`.",null,null],[8,"Aligned","","A marker trait indicating that a type has an alignment over `1`,\nand is therefore not safe to use in an unaligned context.",null,null],[16,"Unaligned","","An unaligned representation of this type. Usually a u8 array of the\nsame size.",0,null],[11,"is_aligned","","Determines whether an unaligned representation of this type is aligned.",0,{"inputs":[{"name":"aligned"},{"name":"unaligned"}],"output":{"name":"bool"}}],[11,"as_unaligned","","Borrows the value as unaligned.",0,{"inputs":[{"name":"aligned"}],"output":{"name":"unaligned"}}],[11,"as_unaligned_mut","","Mutably borrows the value as unaligned.",0,{"inputs":[{"name":"aligned"}],"output":{"name":"unaligned"}}],[11,"as_aligned","","Borrows an unaligned type as an aligned value.",0,{"inputs":[{"name":"aligned"},{"name":"unaligned"}],"output":{"name":"option"}}],[11,"as_aligned_mut","","Mutably borrows an unaligned type as an aligned value.",0,{"inputs":[{"name":"aligned"},{"name":"unaligned"}],"output":{"name":"option"}}],[11,"as_aligned_unchecked","","Borrows an unaligned type as an aligned value, without first checking the alignment.",0,{"inputs":[{"name":"aligned"},{"name":"unaligned"}],"output":{"name":"self"}}],[11,"as_aligned_mut_unchecked","","Mutably borrows an unaligned type as an aligned value, without first checking the alignment.",0,{"inputs":[{"name":"aligned"},{"name":"unaligned"}],"output":{"name":"self"}}],[11,"unaligned","","Converts a value to its unaligned representation.",0,{"inputs":[{"name":"aligned"}],"output":{"name":"unaligned"}}],[11,"from_unaligned","","Copies a value from its unaligned representation.",0,{"inputs":[{"name":"aligned"},{"name":"unaligned"}],"output":{"name":"self"}}],[8,"Packed","","A marker trait indicating that a type is `#[repr(packed)]`.",null,null]],"paths":[[8,"Aligned"]]};
searchIndex['uninitialized'] = {"items":[[0,"","uninitialized","Provides the option to use uninitialized memory for performance improvements.",null,null],[5,"uninitialized","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[17,"UNINITIALIZED","","A constant indicating whether the `uninitialized` feature is enabled.",null,null]],"paths":[]};
initSearch(searchIndex);
